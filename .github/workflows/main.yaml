name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/tests
  pull_request:
    branches:
      - main
      - feature/tests

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install libpq-dev
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  tests:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install libpq-dev
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install PostgreSQL
      run: |
        sudo apt-get install -y postgresql postgresql-contrib

    - name: Configure PostgreSQL
      run: |
        sudo service postgresql start
        sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
        sudo -u postgres psql -c "CREATE DATABASE test_db;"
        sudo -u postgres psql -c "CREATE USER flaskuser WITH PASSWORD 'pFceLXKQaFV6hJuMiJbWaQ60mHnFWIas';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE test_db TO flaskuser;"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      env:
        SQLALCHEMY_DATABASE_URI: postgresql://flaskuser:pFceLXKQaFV6hJuMiJbWaQ60mHnFWIas@localhost/test_db
        PGUSER: postgres
        PGPASSWORD: postgres
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest --maxfail=1 --disable-warnings -v

  deploy:
    needs: tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install libpq-dev
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Create virtual environment
      run: |
        python -m venv venv && . venv/bin/activate

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Deploy to production
      uses: johnbeynon/render-deploy-action@v0.0.7
      with:
        service-id: ${{ secrets.SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
